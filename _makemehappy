#compdef mmh

# Internal state

typeset -ga _makemehappy_commands=() _makemehappy_aliases=()
typeset -gA _makemehappy_aliasmap

_makemehappy_aliasmap=(
    deps      fetch-dependencies
    dump      dump-description
    focus     focus-instance
    get       download-source
    init      build-tree-init
    list      list-instances
    reset     reset-setup
    run       run-instance
    result    show-result
    revs      revision-overrides
    show      show-source
    top       generate-toplevel
)

# Utilities have to be named __makemehappy-*()

__makemehappy-comma-complete() {
    local tag=$1 lst=$2
    local desc=${tag//-/ }
    local -a already
    compset -P '*,'
    already=( ${(s<,>)IPREFIX} )
    _describe -t $tag $desc $lst -S, -F already -q
}

__makemehappy-architectures() {
    local -a archs
    archs=( $(command mmh -Q architectures 2>/dev/null) )
    __makemehappy-comma-complete makemehappy-architectures archs
}

__makemehappy-buildconfigurations() {
    local -a cfgs
    cfgs=( $(command mmh -Q buildconfigs 2>/dev/null) )
    __makemehappy-comma-complete makemehappy-build-configurations cfgs
}

__makemehappy-buildtools() {
    local -a tools
    tools=( $(command mmh -Q buildtools 2>/dev/null) )
    __makemehappy-comma-complete makemehappy-build-tools tools
}

__makemehappy-nothing-else() {
    _message -e "no further arguments"
}

__makemehappy-modules () {
    local expl
    local -a modules
    modules=( ${${(f)"$(command mmh -q show-source)"}%%:*} )
    _wanted makemehappy-modules expl 'makemehappy modules' \
            compadd "${modules[@]}"
}

__makemehappy-queries () {
    local -a makemehappy_query_keywords
    makemehappy_query_keywords=(
        'toolchains:List toolchains'
        'architectures:List target architectures'
        'buildtools:List build tools'
        'buildconfigs:List build configurations'
        'root:Find closest root-directory'
        'root-module:Find closest module root-directory'
        'root-system:Find closest system root-directory'
    )
    _describe -t makemehappy-queries       \
              'makemehappy query keywords' \
              makemehappy_query_keywords
}

__makemehappy-module-instances () {
    local expl
    local -a instances ignored

    if [[ -n $mmhdir ]]; then
        ignored=(${line:#${words[CURRENT]}})
        instances=( ${${(f)"$(command mmh -q -d "$mmhdir" list)"}%%:*} )
        _wanted module-instances expl 'module instances' \
                compadd -F ignored "${instances[@]}"
        return
    fi
    _message -e 'list-instances requires --directory'
}

__makemehappy-system-instances () {
    local expl
    local -a instances ignored
    ignored=(${line:#${words[CURRENT]}})
    instances=( ${${(f)"$(command mmh -q system list 2>/dev/null)"}%%:*} )
    _wanted system-instances expl 'system instances' \
            compadd -F ignored "${instances[@]}"
}

__makemehappy-toolchains() {
    local -a tcs already
    tcs=( $(command mmh -Q toolchains 2>/dev/null) )
    compset -P '*,'
    already=( ${(s<,>)IPREFIX} )
    _describe -t makemehappy-toolchains 'makemehappy toolchains' \
              tcs -S, -F already -q
}

# Subcommand completions have to be called _makemehappy-*()

_makemehappy-build() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "Run complete module building process"
        return
    fi

    local curcontext=$curcontext state line ret=1

    _arguments -C -s -w : \
               '*::: :->args' \
               '(-h --help)'{-h,--help}'[display help message]' \
        && ret=0

    if [[ $state == args ]]; then
        _message -e instance-filter
    fi
    return ret
}

_makemehappy-build-tree-init() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "Initialise module build tree"
        return
    fi
    __makemehappy-nothing-else
}

_makemehappy-download-source() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "Download sources for specified sources"
        return
    fi

    local curcontext=$curcontext state line ret=1

    _arguments -C -s -w : \
               '*::: :__makemehappy-modules' \
               '(-h --help)'{-h,--help}'[display help message]' \
               '(-b --bare)'{-b,--bare}'[create a bare repository when cloning]' \
               '(-r --release)'{-r,--release}'[use latest release tag after cloning]' \
        && ret=0
}

_makemehappy-download-sources() {
    # Should this just be -a for ‘download-source’?
    if [[ -n ${makemehappy_describe} ]]; then
        print "Download sources for all known modules"
        return
    fi
    local curcontext=$curcontext state line ret=1

    _arguments -C -s -w : \
               '(-h --help)'{-h,--help}'[display help message]' \
               '(-b --bare)'{-b,--bare}'[create a bare repository when cloning]' \
        && ret=0
}

_makemehappy-dump-description() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "Dump module description as read from module spec"
        return
    fi
    __makemehappy-nothing-else
}

_makemehappy-fetch-dependencies() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "Download dependencies of a module"
        return
    fi
    __makemehappy-nothing-else
}

_makemehappy-focus-instance() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "Focus a module instance's build-tree"
        return
    fi

    local curcontext=$curcontext state line ret=1

    _arguments -C -s -w : \
               '*::: :->args' \
               '(-l --link-name)'{-l,--link-name}'[specify focus link name]:focus link:_path_files' \
               '(-n --no-compile-commands)'{-n,--no-compile-commands}'[do not link to compile_commands.json]' \
               '(-h --help)'{-h,--help}'[display help message]' \
        && ret=0

    [[ -z $state ]] && return ret

    if [[ -n $mmhdir ]]; then
        local -a instances ignored
        ignored=(${line:#${words[CURRENT]}})
        instances=( ${${(f)"$(command mmh -q -d "$mmhdir" list)"}%%:*} )
        _wanted module-instances expl 'module instances' \
                compadd -F ignored "${instances[@]}"
        return
    fi
    _path_files
}

_makemehappy-generate-toplevel() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "Generate toplevel buildsystem for a module build tree"
        return
    fi
    __makemehappy-nothing-else
}

_makemehappy-list-instances() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "List available build instances in module build tree"
        return
    fi
    __makemehappy-nothing-else
}

_makemehappy-prepare() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "Completely prepare module build tree"
        return
    fi
    __makemehappy-nothing-else
}

_makemehappy-reset-setup() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "Reset build-tree meta-data"
        return
    fi
    __makemehappy-nothing-else
}

_makemehappy-revision-overrides() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "Show and test revision overrides"
        return
    fi
    __makemehappy-modules
}

_makemehappy-run-instance() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "(Re)run previously configured build-tree"
        return
    fi

    local curcontext=$curcontext state line ret=1

    _arguments -C -s -w : \
               '*::: :__makemehappy-module-instances' \
               '(-h --help)'{-h,--help}'[display help message]' \
               '(-a --all-instances)'{-a,--all-instances}'[Force building all system instances]' \
        && ret=0
}

_makemehappy-show-result() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "Show result table from log-file"
        return
    fi

    local curcontext=$curcontext state line ret=1

    _arguments -C -s -w : \
               '(-f --full)'{-f,--full}'[Replay full log with log-prefix stripped]' \
               '(-g --grep)'{-g,--grep}'[Scan log for incidents]' \
               '(-h --help)'{-h,--help}'[display help message]' \
               '(-j --json)'{-j,--json}'[Report incidents from log file in JSON format]' \
               '(-r --report)'{-r,--report}'[Report incidents from log file]' \
               '(-s --short)'{-s,--short}'[Do not show and result output]' \
               '(-p --paged)'{-p,--paged}'[Use pager to view result]' \
               '(-q --quiet)'{-q,--quiet}'[Only show final short-form result]' \
               '*:: :_path_files' \
        && ret=0
}

_makemehappy-show-source() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "Show source definition for modules"
        return
    fi
    __makemehappy-modules
}

___makemehappy-system-deploy() {
    _arguments -C -s -w : \
               '(-h --help)'{-h,--help}'[display help message]' \
               '(-l --list)'{-l,--list}'[list collection of in/out files]' \
               '(-s --show)'{-s,--show}'[show manifest in human readable form]' \
               '(-S --strict)'{-S,--strict}'[make all manifest issues into errors]' \
               '1::system deploy prefix directory:_path_files -g "*(/)"' \
}

_makemehappy-system() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "Commands for complete or partial system builds"
        return
    fi

    local curcontext=$curcontext state line ret=1

    _arguments -C -s -w : \
               '*::: :->args' \
               '(-h --help)'{-h,--help}'[display help message]' \
               '(-s --single-instance)'{-s,--single-instance}'[Build a single instance in the build directory root]' \
               '(-a --all-instances)'{-a,--all-instances}'[Force building all system instances]' \
        && ret=0

    if [[ -n $state ]]; then
        if (( CURRENT == 1 )); then
            local -a commands

            commands=(
                build:'perform config/build/install/test on system'
                clean:'clean build trees'
                deploy:'run system deployment'
                db:'link compile command db to system root'
                list:'list specified instances'
                rebuild:'like "build" but skip config step'
            )

            _describe -t commands command commands && ret=0
        else
            curcontext=${curcontext%:*}-$line[1]:
            compset -n 1

            case $line[1] in
            (build|clean|rebuild)
                _arguments -C -s -w : \
                           '(-h --help)'{-h,--help}'[display help message]' \
                           '*:: :__makemehappy-system-instances' \
                    && ret=0
                ;;
            (deploy) ___makemehappy-system-deploy && ret=0 ;;
            (db)
                _arguments -C -s -w : \
                           '(-h --help)'{-h,--help}'[display help message]' \
                           '(-l --location)'{-l,--location}'[select directory for db link]:directory:_path_files -g "*(/)"' \
                           '1:: :__makemehappy-system-instances' \
                    && ret=0
                ;;
            (*) __makemehappy-nothing-else ;;
            esac
        fi
    fi

    return ret
}

_makemehappy-verify() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "Verify checksum files in deployments"
        return
    fi

    local curcontext=$curcontext state line ret=1

    _arguments -C -s -w : \
               '(-h --help)'{-h,--help}'[display help message]' \
               '(-b --basename)'{-b,--basename}'[Basename for checksum files in directories]' \
               '(-r --root-directory)'{-r,--root-directory}'[Root directory for files in checksum files]' \
               '*:: :_path_files' \
        && ret=0
}

# Main completion entry point

_makemehappy() {
    local curcontext="${curcontext}" state line ret=1
    local mode
    local makemehappycommand
    local makemehappy_describe
    local -i dirindex=${words[(I)-d|--directory]}
    local mmhdir

    if (( dirindex )); then
        mmhdir=${words[dirindex + 1]}
    fi

    _arguments -C : \
               '(-A --architectures)'{-A,--architectures}'[select architectures to use]:architecture:__makemehappy-architectures' \
               '(-B --buildtools)'{-B,--buildtools}'[select build-tools to use]:build-tool:__makemehappy-buildtools' \
               '(-C --buildconfigs)'{-C,--buildconfigs}'[select build-configurations to use]:build-configuration:__makemehappy-buildconfigurations' \
               '(-d --directory)'{-d,--directory}'[specify build directory]:build directory:_path_files -g "*(/)"' \
               '(-F --force)'{-F,--force}'[force using MakeMeHappy.yaml]' \
               '(-f --log-file)'{-f,--log-file}'[specify log file]:file name:_path_files' \
               '(-h --help)'{-h,--help}'[display help message]' \
               '(-R --raise-exceptions)'{-R,--raise-exceptions}'[Raise toplevel exceptions in case of errors.]' \
               '(-P --show-phases)'{-P,--show-phases}'[Show build phases even with --log-to-file.]' \
               '(-L --log-all)'{-L,--log-all}'[send all output to logging facility]' \
               '(-l --log-to-file)'{-l,--log-to-file}'[log output to file (implies --log-all)]' \
               '(-m --module)'{-m,--module}'[specify module definition file]:module definition file:_path_files' \
               '(-p --preserve)'{-p,--preserve}'[preserve build root instead of deleting it]' \
               '(-Q --query)'{-Q,--query}'[query module build information]:mmh query:__makemehappy-queries' \
               '(-E --ignore-dep-errors)'{-E,--ignore-dep-errors}'[ignore errors in dependency evaluation]' \
               '(-q --quiet)'{-q,--quiet}'[disable informational output]' \
               '*'{-r,--revision}'[specify revision override]:revision override' \
               '*'{-c,--config}'[specify additional configuration file]:configuration file:_path_files' \
               '(-s --source)'{-s,--source}'[specify additional source definition]:source definition file:_path_files' \
               '(-S --succeed)'{-S,--succeed}'[force successful termination]' \
               '(-T --toolchains)'{-T,--toolchains}'[select toolchains to use]:toolchain:__makemehappy-toolchains' \
               '(-U --disable-user-directory)'{-U,--disable-user-directory}'[disable use of files in user-configuration directory]' \
               '(-v --verbose)'{-v,--verbose}'[request verbose logging]' \
               '(-V --version)'{-V,--version}'[report makemehappy version]' \
               '*:: :->subcommand_or_options' && ret=0

    [[ -z $state ]] && return ret

    if (( CURRENT == 1 )); then
        zstyle -s ":completion:${curcontext}:subcommands" mode mode || mode='both'
        if [[ ${mode} == 'commands' ]]; then
            _describe -t subcommands 'makemehappy command' _makemehappy_commands \
                && ret=0
        elif [[ ${mode} == 'aliases' ]]; then
            _describe -t subcommands 'makemehappy alias' _makemehappy_aliases \
                && ret=0
        else
            _describe -t subcommands 'makemehappy command or alias' \
                      _makemehappy_commands                         \
                      --                                            \
                      _makemehappy_aliases                          \
                && ret=0
        fi
    else
        makemehappycommand="${words[1]}"
        if [[ -n ${_makemehappy_aliasmap[$makemehappycommand]} ]] ; then
            makemehappycommand="${_makemehappy_aliasmap[$makemehappycommand]}"
        fi
        curcontext="${curcontext%:*}-${makemehappycommand}:"
        _call_function ret _makemehappy-${makemehappycommand}
    fi
    return ret
}

# First time initialisation

local f desc
local -A rev
local makemehappy_describe
makemehappy_describe='yes, please'
for f in ${(k)_makemehappy_aliasmap} ; do
    rev+=( ${_makemehappy_aliasmap[$f]} $f )
done
for f in ${(M)${(k)functions}:#_makemehappy-*} ; do
    desc="$($f)"
    _makemehappy_commands+=( "${f#_makemehappy-}${desc:+:$desc}" )
    if [[ -n ${rev[${f#_makemehappy-}]} ]]; then
        _makemehappy_aliases+=( "${rev[${f#_makemehappy-}]}${desc:+:$desc}" )
    fi
done

# First time dispatch to main function redefinition

_makemehappy "$@"
