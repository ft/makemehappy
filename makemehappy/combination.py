# This module implements infrastructure to run arbitrary code to combine
# results from system build instances into additional artefacts.
#
# The module exposes an instance of the Registry type called "combination",
# that the mmh program uses to access the list of combinations that a user
# decided to specify.
#
# The Registry is a mapping of a name (a string) to an instance of the
# Combination type. The Combination type is a class that has two main
# properties: a) a list of parent build instances it depends on (note that a
# Combination cannot be a parent of another Combination. This is by design and
# eliminates the possibility of dependency loops). b) a way to generate one or
# more CombinationOutput instances. This means that each combination in the
# registry can generate an arbitrary amount of artefacts.
#
# A combination output is basically a triple: A list of input files, an output
# file, and a function that can generate the latter using the former.
#
# When the state of a system allows for a combination to be executed, here is
# what happens: The generator is run to create a list of CombinationOutput
# objects. This list is traversed and for each entry, the combination callback
# is run with the input file list and output file name as arguments. The
# results of this are collected. None of the callbacks may throw or return
# False. If and of them does, the combination is marked as being unsuccessfully
# executed.
#
# In order to be able to skip generating artefacts over and over again, during
# processing, the system creates a file that captures the state of the mmh
# program, and all its loaded code, as well as the state of all input files.
# Any changes in this captured state will disallow any short-cuts from being
# taken. In addition, each Combination also gets a state file, the contents of
# which can be referenced in the state files of CombinationOutput objects. This
# allows determining, which artefacts in the binary tree where generated by the
# latest combination build run. The main mmh program builds some tooling around
# these features for additional insight.

import datetime
import hashlib
import os
import re
import makemehappy.pathlike as p
import makemehappy.utilities as mmh

from pathlib import Path

COMBINATION_STATE_FILE_VERSION = 0
OUTPUT_STATE_FILE_VERSION = 0

class InvalidCombinationGenerator(Exception):
    pass

class CombinationOutput:
    def __init__(self, callback, name, inputs):
        self.callback = callback
        self.name = name
        self.inputs = inputs

    def run(self, outdir):
        try:
            return self.callback(self.inputs, outdir / self.name)
        except Exception as e:
            return e

class Combination:
    def __init__(self, name, parents, gen, kwargs):
        self.name = name
        self.parents = parents
        self.gen = gen
        self.kwargs = kwargs
        self.done = False
        self.status = None
        self.mmhstate = None
        self.log = None
        self.buildroot = None
        self.data = None
        self.out = None
        self.outputs = None
        self.stateFile = None
        self.algorithm = hashlib.sha256
        self.checksumCache = {}
        self.printer = None
        self.verbose = None

    def _validOuputs(self, lst):
        if isinstance(lst, list) is False:
            return False
        return all(map(lambda x: isinstance(x, CombinationOutput), lst))

    def ensureLog(self, log):
        if self.log is not None:
            return
        self.log = log
        self.printer = self.log.info
        if mmh.verbosity > 0:
            self.verbose = self.log.info
        else:
            self.verbose = lambda x: True

    def skipped(self):
        return (self.status is None)

    def succeeded(self):
        return (self.status is True)

    def processed(self):
        return (self.done is True)

    def possible(self, instances):
        for p in self.parents:
            if p not in instances:
                return False
        return True

    def runnable(self, instances):
        if self.done:
            return False
        return self.possible(instances)

    def outputDirectory(self):
        return self.out

    def buildRoot(self):
        return self.buildroot

    def generate(self, parents):
        if callable(self.gen):
            _outs = self.gen(self, parents)
            if isinstance(_outs, list):
                self.outputs = _outs
            else:
                self.outputs = [ _outs ]
        elif isinstance(self.gen, list):
            self.outputs = self.gen
        else:
            self.outputs = [ self.gen ]

        if self._validOuputs(self.outputs) is False:
            raise InvalidCombinationGenerator(self.outputs)

    def addCombinationState(self):
        if self.stateFile is None:
            self.stateFile = self.out / '.mmh-state.yaml'
        if self.stateFile.exists():
            self.data = mmh.load(self.stateFile)
        else:
            self.data = {}
        self.data['version'] = COMBINATION_STATE_FILE_VERSION
        self.data['combination'] = self.name
        self.data['timestamp'] = datetime.datetime.now(datetime.UTC)
        self.data['id'] = self.data['id'] + 1 if 'id' in self.data else 0
        self.data['mmh'] = self.mmhstate
        self.verbose(f'Generating combination state: {self.stateFile}, ' +
                     f'id = {self.data["id"]}')
        mmh.dump(self.stateFile, self.data)
        return self.data['id']

    def _checksumFile(self, file):
        # This assumes that files, once created, do not change. So once we have
        # determined the checksum of a file, we can store it and never recalcu-
        # late it again.
        if file in self.checksumCache:
            self.verbose(f'{self.checksumCache[file]}  {file} (cached)')
            return self.checksumCache[file]
        cs = mmh.checksumFile(file, self.algorithm)
        self.checksumCache[file] = cs
        self.verbose(f'{cs}  {file}')
        return cs

    def checksumFileDict(self, fn):
        checksum = self._checksumFile(fn) if fn.exists() else False
        return { 'file': str(fn),
                 'mtime': datetime.datetime.fromtimestamp(
                     os.path.getmtime(fn), datetime.UTC),
                 'checksum': checksum }

    def checksumFileDictList(self, lst):
        rv = []
        for file in lst:
            rv.append(self.checksumFileDict(file))
        return rv

    def loadOutputState(self, output):
        fn = self.out / ('.' + output.name + '.yaml')
        if fn.exists() == False:
            return (fn, None)
        self.verbose(f'{output.name}: Loading output state: {fn}')
        return (fn, mmh.load(fn))

    def addOutputState(self, ident, start, end, output, result):
        fn = self.out / ('.' + output.name + '.yaml')
        data = {}
        data['version'] = OUTPUT_STATE_FILE_VERSION
        data['id'] = ident
        data['fresh'] = ident
        data['mmh'] = self.mmhstate
        us = datetime.timedelta(microseconds=1)
        data['time'] = { 'start': start,
                         'microseconds': round((end - start) / us) }
        data['inputs'] = self.checksumFileDictList(output.inputs)
        # We have to remove a possible entry in the checksum cache for the
        # output file if it exists after running the generator. isUpToDate()
        # may have produced a checksum for the output file, and that would
        # produce an invalid state file.
        final = self.out / output.name
        if final in self.checksumCache:
            del self.checksumCache[final]
        data['output'] = self.checksumFileDict(final)
        data['result'] = result
        self.verbose(f'Generating output state: {fn}, id = {ident}')
        mmh.dump(fn, data)

    def updateOutputState(self, ident, output):
        (fn, data) = self.loadOutputState(output)
        data['id'] = ident
        self.verbose(f'Generating output state: {fn}, id = {ident}, ' +
                     f'fresh = {data["fresh"]}')
        mmh.dump(fn, data)

    def dispatch(self, ident, output):
        self.printer(f'{output.name}: Running generator...')
        starttime = datetime.datetime.now(datetime.UTC)
        rv = output.run(self.out)
        endtime = datetime.datetime.now(datetime.UTC)
        if isinstance(rv, Exception):
            self.log.error(f'Caught exception: {rv}')
            return (False, starttime, endtime)
        elif rv != True:
            self.log.error(f'Output runner did not return success.' +
                           f' Instead: {rv}')
            return (False, starttime, endtime)
        return ((rv == True), starttime, endtime)

    def isUpToDate(self, ident, output):
        # This is a pretty safe way to tell if an output file needs to be rege-
        # nerated or not. I hope it's not too slow. Local tests seem more than
        # fine.
        name = output.name
        file = self.out / output.name
        if file.exists() == False:
            self.printer(f'{name}: Output does not exist')
            return False
        (meta, data) = self.loadOutputState(output)
        if data is None:
            self.printer(f'{name}: Output meta-data could not be read')
            return False
        if data['version'] != OUTPUT_STATE_FILE_VERSION:
            self.printer(f'{name}: Output meta-data incompatible')
            return False
        if data['mmh'] != self.data['mmh']:
            self.printer(f'{name}: mmh program state has changed')
            return False
        chksum = self._checksumFile(file)
        if chksum != data['output']['checksum']:
            self.printer(f'{name}: Output file is inconsistent')
            return False
        newInputs = list(map(str, output.inputs))
        if newInputs == []:
            self.printer(f'{name}: No dependencies, rebuilding always.')
            return False
        oldInputs = list(map(lambda x: x['file'], data['inputs']))
        if newInputs != oldInputs:
            self.printer(f'{name}: Input file spec has changed')
            return False
        for (dep, cache) in zip(output.inputs, data['inputs']):
            chksum = self._checksumFile(dep)
            if chksum != cache['checksum']:
                self.printer(f'{name}: Input file has changed {dep}')
                return False
        self.printer(f'{name}: Output file is up-to-date')
        return True

    def run(self, parents):
        self.buildroot = Path(parents[0].buildroot)
        self.mmhstate = mmh.sourceCodeState.get()
        self.verbose(f'mmh program state: {self.mmhstate}')
        self.out = self.buildroot / 'combination' / self.name
        self.verbose(f'{self.name}: Output directory: {str(self.out)}')
        self.generate(parents)
        self.done = True
        self.status = True
        if self.out.exists() == False:
            self.log.info(f'mkdir({self.out})')
            self.out.mkdir(parents = True, exist_ok = True)
        ident = self.addCombinationState()
        for output in self.outputs:
            if self.isUpToDate(ident, output):
                self.updateOutputState(ident, output)
                continue
            (rv, s, e) = self.dispatch(ident, output)
            if rv != True:
                self.status = False
            self.addOutputState(ident, s, e, output, rv)
        return self.status

    def __str__(self):
        return self.name

class ParentInstance:
    def __init__(self, log, name, buildroot, data):
        self.log = log
        self.name = name
        self.data = data
        self.buildroot = buildroot
        self.builddir = p.BuildDirectory(buildroot, self.name, self.log)
        self.sourcedir = p.SourceDirectory(self.data.instance.systemdir)

    def cmake(self, key = None, force = False):
        return self.builddir.cmake(key, force)

    def buildDirectory(self):
        return self.builddir

    def sourceDirectory(self):
        return self.sourcedir

class Registry:
    def __init__(self):
        self.combinations = {}
        self.parents = {}
        self.entry = None
        self.finish = None
        self.log = None
        self.stats = None

    def __call__(self, *args, **kwargs):
        return self.register(*args, **kwargs)

    def setCallbacks(self, entry, finish):
        self.entry = entry
        self.finish = finish

    def setLog(self, log):
        self.log = log

    def setStats(self, stats):
        self.stats = stats

    def xcount(self, pred):
        cnt = 0
        for name in self.combinations:
            c = self.combinations[name]
            if getattr(c. pred)():
                cnt = cnt + 1
        return cnt

    def countProcessed(self):
        """Return number of combinations that where processed.

        A processed combination may have been skipped (because a parent did not
        succeed), failed or succeeded."""
        return self.xcount('processed')

    def countSkipped(self):
        """Return the number of processed but skipped combinations."""
        return self.xcount('skipped')

    def countSucceeded(self):
        """Return the number of successfully processed combinations."""
        return self.xcount('succeeded')

    def countPossible(self, instances):
        """Return the number of possible combinations to be build.

        In contrast to countProcessed(), this can be run before the entire
        build-process. Given a set of build instances to be performed, the
        number of possible combinations can be computed."""
        n = 0
        for name in self.combinations:
            c = self.combinations[name]
            if c.possible(instances):
                n = n + 1
        return n

    def addParent(self, name, buildroot, data):
        self.parents[name] = ParentInstance(self.log, name, buildroot, data)

    def register(self, name, parents, cbs, **kwargs):
        """Register a build-combination.

        This registers a build combination named "name", which requires the
        list of "parents" to be build before it can be executed. The "run"
        function must accept at least two arguments, the first argument will be
        the name of the combination to be built, and the second being a list of
        ParentInstance instances, corresponding to its parent list from the
        "parents" argument.

        Any other keyword arguments are passed to the "run" function verbatim.
        It therefore will have to be able to accept those as well.

        The "run" function must return a boolean value, that indicates whether
        or not processing the combination succeeded or not."""
        if mmh.verbosity > 0:
            self.log.info(f'Registering build-combination {name} ' +
                          f'with {len(parents)} dependencies.')
        self.combinations[name] = Combination(name, parents, cbs, kwargs)

    def listParents(self, lst):
        return list(map(lambda p: self.parents[p], lst))

    def listCombinations(self):
        return list(self.combinations)

    def execute(self):
        for name in self.combinations:
            c = self.combinations[name]
            c.ensureLog(self.log)
            if (c.runnable(self.parents.keys())):
                self.stats.systemCombination(name, c.parents)
                if self.entry is not None:
                    self.entry(name)
                plst = self.listParents(c.parents)
                parentsok = True
                for p in plst:
                    success = p.data.succeeded()
                    if not success:
                        self.log.warn(f'combination({name}):' +
                                      ' {p.description} did not succeed')
                        self.log.warn(f'combination({name}): will be skipped')
                        parentsok = False
                if not parentsok:
                    c.done = True
                    self.finish(name, 'skipped')
                else:
                    rc = c.run(plst)
                    self.stats.logBuild(0 if rc else 1)
                    if self.finish is not None:
                        self.finish(name, None if rc else 'failed')

combination = Registry()

def _checksumFile(file):
    return mmh.checksumFile(file, hashlib.sha256)

def findOutputs(base):
    rv = []
    for candidate in Path(base).rglob('.*.yaml'):
        if candidate.name == '.mmh-state.yaml':
            continue
        rv.append(candidate)
    return rv

def checkDependencies(lst):
    deps = []
    summary = 'intact'
    for entry in lst:
        p = Path(entry['file'])
        data = { 'file': p }
        if p.exists() == False:
            summary = 'broken'
            data['integrity'] = 'missing'
            deps.append(data)
            continue
        chksum = _checksumFile(p)
        data['integrity'] = 'broken'
        data['expect'] = entry['checksum']
        data['actual'] = chksum
        if data['actual'] == data['expect']:
            data['integrity'] = 'intact'
        else:
            summary = 'broken'
        deps.append(data)
    return (len(deps), summary, deps)

def evaluateOutput(cdata, odata):
    file = Path(odata['output']['file'])
    isActive = cdata['id'] == odata['id']
    isFresh = isActive and odata['id'] == odata['fresh']

    state = 'stale'
    if file.exists() == False:
        state = 'missing'
    elif isFresh:
        state = 'fresh'
    elif isActive:
        state = 'active'

    if state != 'missing':
        chksum = _checksumFile(file)
        expect = odata['output']['checksum']
        integrity = 'broken'
        if chksum == expect:
            integrity = 'intact'
    else:
        chksum = None
        expect = None
        integrity = None

    (dn, ds, deps) = checkDependencies(odata['inputs'])

    return { 'combination':  cdata,
             'output':       odata,
             'id':           odata['id'],
             'fresh':        odata['fresh'],
             'file':         file,
             'name':         file.name,
             'creation':     odata['output']['mtime'],
             'isActive':     isActive,
             'isFresh':      isFresh,
             'state':        state,
             'integrity':    integrity,
             'checksum':     chksum,
             'expected':     expect,
             'dep-state':    ds,
             'dep-summary':  f'{dn}, {ds}',
             'dependencies': deps }

def renderOutput(data, n, idx):
    print(f"  {data['name']} ({idx + 1}/{n})")
    label = 'state'
    print(f"    {label:.<14}: {data['state']} (id: {data['fresh']})")
    label = 'creation'
    print(f"    {label:.<14}: {data['creation']}")
    if data['integrity'] is not None:
        label = 'integrity'
        print(f"    {label:.<14}: {data['integrity']}")
        if data['integrity'] != 'intact':
            label = 'file'
            print(f"    {label:.<14}: {data['file']}")
            label = 'expected'
            print(f"    {label:.<14}: {data['expected']}")
            label = 'actual'
            print(f"    {label:.<14}: {data['checksum']}")
        elif mmh.verbosity > 0:
            label = 'checksum'
            print(f"    {label:.<14}: {data['checksum']}")
    label = 'dependencies'
    if mmh.verbosity > 0:
        print(f"    {label:.<14}:")
        for dep in data['dependencies']:
            state = dep['integrity']
            l = 'file'
            print(f'      {l:.<10}: {dep["file"]}')
            if state == 'missing':
                l = 'state'
                print(f'      {l:.<10}: {state}')
            elif state == 'intact':
                l = 'state'
                print(f'      {l:.<10}: {state}')
                l = 'checksum'
                print(f'      {l:.<10}: {dep["actual"]}')
            elif state == 'broken':
                l = 'state'
                print(f'      {l:.<10}: {state}')
                l = 'expected'
                print(f'      {l:.<10}: {dep["expect"]}')
                l = 'actual'
                print(f'      {l:.<10}: {dep["actual"]}')
            else:
                print(f'      Unknown state: {state}')
            print('   ', '-' * 80)
    else:
        print(f"    {label:.<14}: {data['dep-summary']}")

def _regex_filter(patterns, full, ifmatch, ifnotmatch):
    ps = list(map(re.compile, patterns))

    def _filter(f):
        if full:
            string = str(Path(f.parent) / f.stem[1:])
        else:
            string = str(f.stem[1:])
        for pat in ps:
            if re.search(pat, string):
                return ifmatch
        return ifnotmatch
    return _filter

def _only(*patterns):
    return _regex_filter(patterns, False, True, False)

def _remove(*patterns):
    return _regex_filter(patterns, False, False, True)

def _fonly(*patterns):
    return _regex_filter(patterns, True, True, False)

def _fremove(*patterns):
    return _regex_filter(patterns, True, False, True)

def _combinationIterate(prefix, root, start, patterns, excludes,
                        before = None, perOutput = None):
    candidates = list(Path(start).rglob('.mmh-state.yaml'))
    cn = len(candidates)
    for (cidx, state) in enumerate(candidates):
        cdata = mmh.load(state)
        if cdata['version'] != COMBINATION_STATE_FILE_VERSION:
            # We don't understand the state file version, but we can get the
            # label for the combination we can't read from the name of the
            # pathnames. So lets do that, let the user know and continue.
            label = state.relative_to(root).parent
            print(f'{label}: Incompatible state version: {cdata["version"]}')
            continue
        combination = prefix + '/' + cdata['combination']
        outputs = findOutputs(state.parent)

        # We can't use the filter generators from makemehappy.manifest here,
        # because what findOutputs() generates is a list of .FOO.yaml files,
        # which are not the output files, but state data of the output files.
        # We could read those, and ask them what the output file would be. But
        # that's expensive, and wouldn't really solve the problem either. What
        # we can do, is write similar filter functions as only and remove from
        # the manifest module, and determine the output file name from the
        # state file and match on that.
        if patterns is not None:
            outputs = list(filter(_only(*patterns), outputs))
        if excludes is not None:
            outputs = list(filter(_remove(*excludes), outputs))

        on = len(outputs)
        if before is not None:
            rv = before(prefix, root, start, state, cdata,
                        combination, cn, cidx, on)
            if rv == False:
                return False
        for (oidx, output) in enumerate(outputs):
            odata = mmh.load(output)
            if odata['version'] != OUTPUT_STATE_FILE_VERSION:
                # Similarly to the unsupported combination format version, with
                # the output state, we can also guess the output file name from
                # the name of the state file. Again, do that and continue.
                label = output.stem[1:]
                print(f'  {label}: Incompatible output version:',
                      f'{odata["version"]}')
                continue
            if perOutput is not None:
                rv = perOutput(prefix, root, start, state,
                               cdata, combination,
                               odata, output, cn, cidx, on, oidx)
                if rv == False:
                    return False
    return True

def combinationOverview(args, prefix, root, start):
    def _before(prefix, root, start, state, cdata, combination, cn, cidx, on):
        filtered = False
        if args.pattern:
            filtered = True
            print(f'Matching: {args.pattern}')
        if args.exclude:
            filtered = True
            print(f'Removing: {args.exclude}')
        matching = 'Matching o' if filtered else 'O'
        print(f'{matching}utputs produced by {combination}',
              f'({cidx + 1}/{cn}, {on}):')

    def _perOutput(prefix, root, start, state,
                   cdata, combination, odata, output, cn, cidx, on, oidx):
        renderOutput(evaluateOutput(cdata, odata), on, oidx)

    return _combinationIterate(prefix, root, start, args.pattern, args.exclude,
                               before = _before,
                               perOutput = _perOutput)

def combinationGC(prefix, root, start):
    def _perOutput(prefix, root, start, state,
                   cdata, combination, odata, output, cn, cidx, on, oidx):
        data = evaluateOutput(cdata, odata)
        if data['state'] != 'stale' and data['state'] != 'missing':
            return True
        file = data['file']
        meta = file.parent / ('.' + file.name + '.yaml')

        if data['state'] == 'stale':
            print(f'Removing stale output: {file}')
        else:
            print(f'Removing output meta: {meta}')
        try:
            if file.exists():
                file.unlink()
            meta.unlink()
        except Exception as e:
            print(f'  Error: {e}')
            return False
        return True

    return _combinationIterate(prefix, root, start,
                               perOutput = _perOutput)

def combinationCleanupDubious(prefix, root, start):
    def _outputIntact(data):
        # State must be fresh or active, integrity must of 'intact', and
        # dep-state must be 'intact'. Everything else is dubious.
        if data['state'] != 'fresh' and data['state'] != 'active':
            print(f'  Output state dubious: {data["state"]}')
            return False
        if data['integrity'] is None or data['integrity'] != 'intact':
            print(f'  Output integrity dubious: {data["integrity"]}')
            return False
        if data['dep-state'] != 'intact':
            print(f'  Dependency state dubious: {data["dep-state"]}')
            return False
        return True
    def _perOutput(prefix, root, start, state,
                   cdata, combination, odata, output, cn, cidx, on, oidx):
        data = evaluateOutput(cdata, odata)
        if _outputIntact(data):
            return True
        file = data['file']
        meta = file.parent / ('.' + file.name + '.yaml')

        try:
            if file.exists():
                print(f'    Removing combination output: {file}')
                file.unlink()
            print(f'    Removing output meta: {meta}')
            meta.unlink()
        except Exception as e:
            print(f'  Error: {e}')
            return False
        return True

    return _combinationIterate(prefix, root, start,
                               perOutput = _perOutput)

def combinationCleanup(prefix, root, start):
    rc = True
    for state in Path(start).rglob('.mmh-state.yaml'):
        combination = state.parent
        outputs = findOutputs(state.parent)
        for meta in outputs:
            p = meta.parent
            file = p / meta.stem[1:]
            print(f'rm {file} (and {meta.name})')
            try:
                if file.exists():
                    file.unlink()
                meta.unlink()
            except Exception as e:
                print(f'  Error: {e}')
                rc = False
    return rc

def combinationList(prefix, root, start):
    rc = False
    for state in Path(start).rglob('.mmh-state.yaml'):
        rc = True
        print(state.parent)
    return rc

def outputList(args, prefix, root, start):
    rc = False
    n = 1
    for state in Path(start).rglob('.mmh-state.yaml'):
        combination = state.parent
        outputs = findOutputs(state.parent)
        if args.pattern is not None:
            outputs = list(filter(_fonly(*args.pattern), outputs))
        if args.exclude is not None:
            outputs = list(filter(_fremove(*args.exclude), outputs))
        for meta in outputs:
            rc = True
            p = meta.parent
            file = p / meta.stem[1:]
            print(file)
    return rc

def combinationQuery(prefix, root, start):
    rc = False
    prefix = 'combination'
    for key in combination.combinations:
        rc = True
        print(prefix + '/' + key)
    return rc

def outputQuery(prefix, root, start):
    rc = False
    prefix = 'combination'
    for key in combination.combinations:
        rc = True
        c = combination.combinations[key]
        c.generate()
        for output in c.outputs:
            print(output)
    return rc

def combinationTool(root, log, args):
    prefix = 'combination'
    root = Path(root)
    start = root / prefix

    if args.garbage_collect:
        print('Scanning for stale combination outputs...')
        return combinationGC(prefix, root, start)

    if args.cleanup_outputs:
        return combinationCleanup(prefix, root, start)

    if args.cleanup_dubious:
        print('Scanning for dubious combination outputs...')
        return combinationCleanupDubious(prefix, root, start)

    if args.list_combinations:
        return combinationList(prefix, root, start)

    if args.list_outputs:
        return outputList(args, prefix, root, start)

    if args.query_combinations:
        return combinationQuery(prefix, root, start)

    return combinationOverview(args, prefix, root, start)
