#!@@PYTHON@@

import os
import re
import sys

from pathlib import Path
from logbook import Logger

import makemehappy.hooks     as h
import makemehappy.utilities as mmh

from makemehappy.cli         import ap
from makemehappy.combination import combination
from makemehappy.loghandler  import MMHLogHandler
from makemehappy.program     import (Program, MMHException,
                                     MissingModuleDefinition,
                                     ProgramExit, UnknownSubCommand)
from makemehappy.yamlstack   import (ConfigStack, SourceStack)

### Foundational Setup ########################################################

mmh.sourceCodeState.add(os.path.realpath(__file__))

version = "@@VERSION@@"
fullname = "MakeMeHappy"
name = "mmh"
commandReturnValue = 0

log = Logger(fullname)
log.handlers.append(MMHLogHandler())
combination.setLog(log)

etcdir = '@@ETCDIR@@'
datadir = '@@DATADIR@@'

cfg = ConfigStack(log, 'Configuration')
src = SourceStack(log, 'Source Definition')

### Run Command Line Parser ###################################################

cmakeParameters = None
cmakeSeparator = None
try:
    cmakeSeparator = sys.argv.index('++')
    if (cmakeSeparator == len(sys.argv)):
        cmakeParameters = []
    else:
        cmakeParameters = sys.argv[cmakeSeparator + 1:]
    sys.argv = sys.argv[0:cmakeSeparator]
except ValueError:
    cmakeParameters = None

cmdargs = ap.parse_args()

### Adjust Argument Setup #####################################################

def mmh_exit(code):
    h.finish_hook(cmdargs = cmdargs, exitcode = code)
    if cmdargs.succeed:
        exit(0)
    exit(code)

if (cmdargs.version):
    print("{} ({}) version {}".format(fullname, name, version))
    print()
    print('  datadir = {}'.format(datadir))
    print('  etcdir  = {}'.format(etcdir))
    print()
    mmh_exit(0)

def mmh_search_in_dirs(stack, name):
    stack.push(os.path.join(datadir, name))
    stack.push(os.path.join(etcdir,  name))
    if (cmdargs.disable_user_directory == False):
        stack.push(mmh.xdgFile(name))
        stack.push(mmh.dotFile(name))

mmh_search_in_dirs(cfg, 'config.yaml')
mmh_search_in_dirs(src, 'sources.yaml')

if cmdargs.query is not None:
    log.disable()

if (isinstance(cmdargs.directory, str)):
    cmdargs.preserve = not cmdargs.preserve

if (cmdargs.verbose):
    mmh.setVerbosity(1)

if (cmdargs.quiet):
    log.disable()

if ('use_pager' not in cmdargs):
    cmdargs.use_pager = False

if ('instances' not in cmdargs):
    cmdargs.instances = []

if ('single_instance' not in cmdargs):
    cmdargs.single_instance = None

earlyExit = False
def mmh_add_to_stack(lst, stack, desc):
    global earlyExit
    for item in lst:
        if (re.search(r'\.ya?ml$', item) is not None):
            if (os.path.isfile(item)):
                stack.push(item)
            else:
                print(f'No such file: {item}')
                earlyExit = True
        else:
            mmh_search_in_dirs(stack, item + '.yaml')

mmh_add_to_stack(cmdargs.config, cfg, "Config")
mmh_add_to_stack(cmdargs.source, src, "Source")

if cmdargs.disable_user_directory == False:
    for fnc in [ mmh.xdgFile, mmh.dotFile ]:
        cfgpy = Path(fnc('config.py'))
        if cfgpy.exists():
            mmh.loadPython(log, cfgpy, force = cmdargs.load_insecure_files)

if (earlyExit):
    mmh_exit(1)

if cmdargs.log_to_file:
    cmdargs.log_all = True
    cmdargs.log_file_from_default = False
    if cmdargs.log_file is None:
        cmdargs.log_file_from_default = True
        if cmdargs.directory is None:
            cmdargs.log_file = 'build.log'
        else:
            cmdargs.log_file = cmdargs.directory + ".log"
    h.init_hook('setup-log-file', log = log, args = cmdargs)
    print(f'Logging to: {cmdargs.log_file}')
    log.handlers[0].setFile(cmdargs.log_file)
else:
    log.handlers[0].setFile(False)

if cmdargs.toolchains is not None:
    cmdargs.toolchains = cmdargs.toolchains.split(',')
if cmdargs.buildtools is not None:
    cmdargs.buildtools = cmdargs.buildtools.split(',')
if cmdargs.buildconfigs is not None:
    cmdargs.buildconfigs = cmdargs.buildconfigs.split(',')
if cmdargs.architectures is not None:
    cmdargs.architectures = cmdargs.architectures.split(',')

cmdargs.cmake = cmakeParameters

if (cmdargs.sub_command is None):
    if (os.path.isfile('system.yaml')):
        cmdargs.sub_command = 'system'
    elif (cmdargs.directory is not None and os.path.exists(cmdargs.directory)):
        cmdargs.sub_command = 'run-instance'
    else:
        cmdargs.sub_command = 'build'
    log.info("Starting up using default command ({})"
             .format(cmdargs.sub_command))
elif (cmdargs.sub_command != False):
    log.info("Starting up using '{}' command".format(cmdargs.sub_command))

### Run Main Program ##########################################################

try:
    prg = Program(log, cfg, src, cmdargs, version)

    if cmdargs.query is not None:
        prg.query()
    else:
        prg.dispatch()

except Exception as e:
    if isinstance(e, ProgramExit):
        exit(e.args[0])
    if isinstance(e, MissingModuleDefinition):
        print(f'Missing module definition: {e.args[0]}')
        exit(1)
    if isinstance(e, UnknownSubCommand):
        print(f'Unknown sub-command: {e.args[0]}')
        exit(1)
    if cmdargs.raise_exceptions:
        raise e
    exit(1)

exit(0)
