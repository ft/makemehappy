* Main objectives
** DONE Really generate toplevel CMakeLists.txt
** DONE Add support for extending CMAKE_MODULE_PATH
** DONE Make dependency fetcher build its dep-trace correctly
** DONE Write output to log
** DONE Write log to log file
** DONE Handle external program return codes correctly
** DONE Run all configured build-instances
…not just the default native build using make.
** DONE Determine inclusion-order for toplevel CMakeLists.txt
* Secondary
** ACTIVE Add hook system to execute arbitrary code during operation

Status: This basically exists now, for modules, systems, as well as user confi-
guration. But the set of arguments and the processing of possible return values
from hook functions is not finalised yet. Feel free to use them, but expect
things to break in the future.

Possible points of interest:

- pre-exec
- post-exec
- pre-instance
- post-instance

…more might be possible. One possible application is to allow preparing build
environments in ways that stock mmh can't; or to allow post-processing the
build results, or to execute deployment code.

** TODO Make revision overrides use release-pattern from sources
…as the default for its use-latest-revision-pattern parameter.
** TODO Implement YAML linters

All linters should make sure, the used keys are type correct. Unrecognised keys
should be warnings.

*** Automatic mode

mmh lint foobar.yaml

For yaml files that specify "mmh: TYPE".

*** Specified mode

mmh lint --type=config config.yaml

Possible types:

- config
- sources
- module
- system

*** System Linter

- Check zephyr module revisions against west.yaml

*** Module Linter

- Allow --thorough to contact remote repositories and check if "revision" for
  dependencies make sense.

*** Source Linter

With --thorough:

- Check if "repository" exists.
- Check if "main" branch spec can be resolved against remote repository.

** TODO Allow third-party zephyr modules to have a makemehappy.yaml file
This can be used to automatically match module versions with zephyr-kernel
versions.

The idea is to first checkout the module's "main" branch; load this file, then
check the configured zephyr-kernel version, and switch the module to the revi-
sion specified therein.

kernel-map:
  # For up to and including v2.0.0 use 1.2.3
  v2.0.0: v1.2.3
  # For up to and including v2.7.0 use 1.3.0
  v2.7.0: v1.3.0
  # and so on…
  v3.0.0: v2.0.0
  # and so forth…
  v3.1.0: v2.1.0
  # If we don't know what to use based on the table, use this.
  fallback: master
** TODO Add a way to load extensions (like toolchainpath) in system.yaml

From subdirectories, that have modules with a module.yaml. At the moment, only
the extensions from ‘ufw’ are considered.

** TODO Add a way to define dependencies for third-party modules
** TODO cmake: Invoke CMake to configure a build-tree
Sometimes when working on the CMake-system  part of a software module, it might
useful to be able to invoke CMake's configuration step for a certain build tree
at will. This is possible to do manually, of course, but cumbersome, since much
of the build's parameters need to be specified on CMake's command line. And mmh
could figure out all of those for you.

In mmh builds,  all important build specific information is  encoded in the di-
rectory name that mmh generated. This should become the ‘cmake’ sub-command.

#+BEGIN_EXAMPLE
# From build directory (assumes top-level in ../..):
% mmh cmake
# From module source directory:
% mmh cmake ci/build/gnu_native_posix_debug_make
# Configure multiple build-trees:
% mmh cmake ci/build/gnu_native_posix_debug_{make,ninja}
#+END_EXAMPLE

All important parameters are encoded in the build-directory name:

- Zephyr: ~zephyr-gnuarmemb_nucleo-f767zi_none_debug_ninja~
- Board: ~gnu_native_posix_debug_make~ (no ~zephyr-~ prefix)

Note that the build directories are encoded differently nowadays.
** TODO Flesh out user manual
** DONE Parse build output for errors/warnings/notices, etc.

One usecase (indeed its first design-goal) for mmh is to exercise a codebase
against a large number of toolchains, architectures, build configurations and
the like. This is something that is geared toward software QA, running in
continuous integration services. Statistics about diagnostic output from a
toolchain running builds is currently not available with mmh, except grepping
for well known patterns in a full build log.

It would be nice to switch to an appropriate diagnostics parser when the build
switches to a different toolchain, accumulating a consistent and comprehensive
log for the entire build process. This log should be machine readable, say
JSON, so machine driven analysis modes become easy to implement.

** DONE Allow setting cmake env. variables from module.yaml and system.yaml

CMake variables are settable in module.yaml (via "variables" and "defaults").
There is no analogue in system.yaml. Setting environment variables is not
supported from either. With ufw now supporting toolchain configuration via
these mechanisms, it would be useful to support this.

In module mode, adding this seems trivial. In system mode, it would be nice to
have a similar multistage configuration system as with the other supported
parameters from system.py. With that, it would be required to have a stack of
environment variables and instantiate the right set for any given build
instance.

It would also be useful to only set environment variables that are not set yet
in the user's execution environment. That way a system/module can set defaults,
while allowing the user to adjust if they so choose. There should probably be
an option to override this behaviour, however.

** DONE Add --release to download-source
** DONE Allow --config and --source to reference local files
mmh --config foobar

References foobar.yaml in the config-directory stack. The same is true for
--source.

mmh --config foobar.yaml

Adds a local file (not looked up in the config-directory stack) to the file
stack. Same for --source.
** DONE Add !preserve and !latest to --revision keywords
'!preserve' will serve as the command line version of the same override
keyword.

'!latest' is a new concept, that will select the newest available tag. In
config file terms that is:

revision-overrides:
  - name: foobar
    use-latest-revision: true

As a variant, '!latest:version-*' will be possible, where 'version-*' is a
pattern the selected tag has to match. Again, in config file terms, that is:

revision-overrides:
  - name: foobar
    use-latest-revision: true
    use-latest-pattern: "version-*"
** DONE Allow sources.yaml to specify deprecated module versions
Example:

modules:
  ufw:
    deprecated: [ v23.32.99, v100.1.0 ]  # Deprecate some versions.
    deprecated: true                     # Deprecate the whole module.
    alternative: ufw-ng                  # Alternative to this module.

Violating deprecations should be warnings by default.
** DONE Implement version dependency judgements
- Major version mismatch: Error
- Minor version mismatch: Warning
- Patchlevel mismatch: Informational message
- Module specifies a deprecated version: Warning

Severity Levels should be configurable via command line and config.yaml stack.

Possible levels:

- error
- warning
- info
- ignore
** DONE Add revision-overrides subcommand to inspect active revisions
For a module, some modules, with or without matched override.
** DONE Make module builds allow for "foo/bar/baz/quux" type build specs
This is similar to what system builds allow. The UI experience is kind of nice.
** DONE run: Run compilation instances from module-tree
- [X] All
- [X] One
- [X] Some

Implemented by foo/bar/*/baz style instance-filters.
** DONE YAML Stacks should be merged after loading, not on every lookup
The overhead didn't use to be all that bad, but with the additional features,
it is becoming noticeable.
** DONE Config Extensions
Read Configs with --config=foo

Look in datapath, etcpath, homepath, and localpath (current working dir) and
put them on top of the config stack.

This should also work with the sources stack, via --sources=bar.
** DONE Specify "main" branch in sources.yaml
Can be a list of strings or a string.  The default is

  [ 'main', 'master' ]

Which will use "main" if it exists and if not it uses "master" if it exists;
otherwise mmh should signal an error. Any particular string value needs to
exist as a branch outright.
** DONE Allow config to override module revision specs
revision-overrides:
  - name: "*foo*"
    revision: v1.0.0
  - name: "*bar*"
    use-main-branch: true

Would force all modules that match "*foo*" to use the "v1.0.0" revision instead
of the revision specified in module.yaml dependency definitions.

Modules matching "*bar*" will use the "main" branch configured in its source
definition.

This should also work from the command line:

  mmh --revision "*foo*=v1.0.0" --revision "*bar*=!main" build

…where "!KEYWORD" is a special pattern and "main" would be equivalent to
setting "use-main-branch: true" in a configuration file.
** DONE Allow "west" key in sources spec to specify a zephyr module's west name
** DONE Enable removing parameters from YAML Stack data
It's unfortunate, that this is not possible at the moment, particularly for
toolchains, but also for modules and the planned revision-overrides. It's
probably easy to add removers the lists-of-strings and keys-of-dicts, if it's
just in the first level of the data-structure.

Removals are applied when merging the stacked data-structre and happens just
before data from a higher level file is merged.

- [X] config.yaml
- [X] sources.yaml

#+begin_src yaml
# In config.yaml:
remove:
  toolchains:
    - clang
    - ti-c2000
  revision-overrides:
    - zephyr-kernel
    - ufw
  buildconfigs:
    - minsizerel
    - relwithdebug
  buildtools:
    - make

# In sources.yaml
remove:
  modules:
    - newlib
    - mcuboot
#+end_src
** DONE Get zephyr module dependency from west.yaml from zephyr-kernel repo
** DONE system: Build many parameter combinations for a system-build
In normal operation, mmh tries to build  a module's code with as many parameter
combinations as possible (toolchain, build-cfg, build-tool etc). To do this, it
resolves dependencies and  generates a CMake top-level setup to  build and test
the whole affair.

For production software, this level of automation may be undesirable. Maintain-
ers may decide to rather implement this top-level system themselves and instan-
tiate the dependencies on their own as well. Thus a build without these automa-
tion steps is a system-build.  This kind of system-build  is supported by UFW's
CMake extensions.

One of the limitations of CMake is, that a single build can only use one single
toolchain. In embedded development it is  not uncommon having to resort to ven-
dor specific toolchains, thus for complete builds requiring the use of multiple
toolchains to build all applications that belong to a system.

It's actually possible to overcome this, by using CMake's ExternalProject modu-
le and run CMake  in a recursive scheme, so that each  sub-call of cmake confi-
gures a build for a single toolchain,  thus tying everything into a single mas-
sive build. The CMake modules of the UFW library implement this scheme.

This has several downsides: The CMakeLists.txt file becomes tough to follow be-
cause the same  file gets parsed in multiple ways  by multiple CMake processes.
The build tree becomes  complex and quite deep so the  top-level CMake call can
keep track of what is happening. This is rather unergonomic for the user to de-
cent into. And  finally, it becomes tough to perform  parallel build correctly.
If you use  Ninja, for instance an  run your top-level ninja  in parallel mode,
the recursive calls may also be parallel,  which — in complex builds — can mas-
sively overload your system.

UFW's API follows  a pretty declarative approach in  specifying desired builds.
This declaration  can also be done  outside of CMake,  say in a YAML  file, and
instead of  having CMake call CMake  for configuration and have  the build tool
call the  build tool again  recursively for building,  have mmh call  cmake and
then have mmh call the build system as desired.

This has the one  downside, that a build like that  introduces a new dependency
upon mmh.  But on the  plus side, it would  solve all the  previously mentioned
problems. Since mmh would have perfect access to all build parameters, it would
make it easy to implement a pleasant command line interface to build parts of a
large system build as well.

The ‘system’ command  should therefore implement the  functionality provided by
UFW's recursive CMake  calling scheme. The UFW library could  be updated accor-
dingly, because  the CMake code  required for  this is not  particularly pretty
either. This could be done for UFW 2.0.0,  at which point we could also break a
couple of things that require inelegant code to implement.
*** DONE mmh system [9/9]
- [X] zephyr: Pick up ufw's kconfig for build-type.
- [X] zephyr: Allow users to define more konfig files.
- [X] general: Allow users to define cmake variables.
- [X] zephyr: Make toolchain path handling more generic.
- [X] zephyr: Allow toolchain list entries to be strings.
- [X] zephyr: Allow modules list to be empty or even undefined.
- [X] zephyr: Parameters from application should be inherited by build.
- [X] generic: Gather stats for config/build/install/test similar to
               module builds.
- [X] generic: Use mmh.loggedProcess() to call external programs.
** DONE Remove Interface Definition
** DONE Use slash (/) as a delimiter in module build instances
** DONE Detect cyclic dependencies in toplevel CMakeLists.txt
** DONE Add YamlStack variant for configuration parsing
** DONE Add option to keep running when a build-instance fails
** DONE With non-temporary build-roots, invert --preserve
** DONE Generate mmh script
Configure:
- Python path
- Data directory (`/usr/share/MakeMeHappy`)
- Config directory (`/etc/MakeMeHappy`)
** DONE Add Debian Packaging
** DONE Allow the user to specify a subset of all defined build instances
If the module.yaml file defines 40 or 50 possible combinations of toolchains,
build configurations, tools and the like, it would be useful to pick from
those.
** DONE Record initial command line args in buildroot/makemehappy.yaml
That way you can set up a complex run once and never have to do that in later
runs again. Add another command to reset/replace previously recorded command
line arguments.
** DONE Allow handing command line arguments to cmake in instance runs
Lets do this:

  mmh [ARGS] [COMMAND-WITH-ARGS...] [-- CMAKE-ARGUMENTS]

That it's possible to run different variants of builds, if the module's build
system allows or requires that.
** DONE Add a second value kind to variables: defaults
This:

  variables:
    FOOBAR: something

…continues to generate this:

  set(FOOBAR, "something")

…while…

  defaults:
    FOOBAR: something

…generates this:

  if (NOT FOOBAR)
    set(FOOBAR, "something")
  endif()

This may be useful in conjunction with passing through cmake arguments:

  mmh -d ci -- -DFOOBAR=something-else

In order to *optionally* run different variants of a build.
** DONE In extension generation, an implementing module should be optional
It is possible that extensions rely on a certain way to use a CMake built-in
facility without requiring an additional module to be included. The include
step should therefore be optional.
** DONE Allow extensions to use add_subdirectory
We might want to be able to do something along the lines of this:

cmake-extensions:
  some-board-definition-module:
   include: add_subdirectory(deps/${moduleroot}/${cmake('TARGET_BOARD')})

To generate this:

   add_subdirectory(deps/some-board-definition-module/${TARGET_BOARD})

This allows using collections of modules in a meta-module. There are certainly
other ways to achieve something similar, but this is easily done, so we should
allow for it.
** DONE Add a separate initialisation clause for cmake extensions
Some modules may need a separate initialisation step that extends whatever the
inclusion step does.

mymod:
  include: add_libtap(${moduleroot})
  init: init_my_module()
  module: MyModSupport

This will be more powerful with generation-waypoints in place. See below.
** DONE Introduce waypoints that for extension generation
With third party extensions you get a way of replacing add_subdirectory() calls
with arbitrary cmake functions or macros. The generation of that looks like
this:

   include(ModuleThatImplementsExtension)
   add_thisextension(deps/thisextension)

If you need to push the generation of ~add_thisextension()~ pack until
something else has happened, however, there is currently no way to achieve
that. With way points, it would be possible to make ~add_thisextension()~
create a ~pre-inclusion~ waypoint and any extensions registered to it, would
generate their code before this waypoint. The possible waypoint variants should
be this:

- pre-module
- post-module
- pre-inclusion
- post-inclusion
- pre-initialisation
- post-initialisation

This is more complex of a problem, especially with module interdependencies to
be considered. Some third-party modules, that border upon having circular
dependencies can't really be used without something like this.

The ‘basic’ and ‘init’ steps were added a while ago. This should be good enough
for the time being.
** DONE Make it possible for an extension to be used by more than one module
cmake-extensions:
  mymod:
    include: add_libtap(${moduleroot})
    init: init_my_module()
    module: MyModSupport

cmake-extension-variants:
  # Explicit list:
  mymod:
    - mymod-a
    - mymod-b
    - mymod-c
  # Also, maybe via pattern:
  mymod: ^mymod-.*$
** DONE Allow source types other than git; symlinks especially
Allowing symlinks gives users the ability to inject ongoing development of
modules into the dependency chain of other modules, making it possible to
develop modules side by side.

Symlink type was implemented pre-v0.10.
** CANCELED ‘toolchains’ configuration should be a dict of dicts
I'm not sure if it's worth fixing this now. Only if it's straight-forward, I
guess.

This is not happening, because we've allowed module.yaml file to override
toolchains in the past, and I am not breaking that.
* Wishlist
** DEFERRED Add an option to specify source directory instead of cwd
For example, with chip-remote:

mmh -C firmware -d native-fw system -s build zephyr/native_posix_64/chip-remote/host/debug

This introduces the concept of the startup directory (SD) and the working di-
rectory (WD). The former is the working directory at the time of startup. The
latter is the directory specified by the -C option. Right now, both of these
values are always the same. If this would be introduced, we would need to spe-
cify how the different parts of the system that reference files and directo-
ries work with respect to these semantics being split up. Only relative paths
are important here, of course. absolute file names are — well — absolute.

Top Level Options

- --directory: SD
- --module: WD
- --log-file: SD
- --config: SD
- --source: SD

Subcommand Options: focus

- --link-name: SD
- Also, the compile_commands.json link should reference SD.

Subcommand Options: run-instance

- When a build-instance is referenced by directory name, SD is the base.

Subcommand Options: system db

- --location: SD

Not quite sure if this is worth it.
** DONE Gather statistics while running
*** DONE How many dependency versions had a patch-level mismatch?
*** DONE How many dependency versions had a minor mismatch?
*** DONE How many dependency versions had a major mismatch?
*** DONE How many dependency versions violated a deprecation?
*** DONE How many build-instances succeeded/failed?
*** DONE How many build-instances had their test runs succeed/fail?
*** DONE How much time did individual steps take to execute?
*** DONE Render statistics nicely at program termination
** DONE Module type: nobuild
To mark modules, that cannot be built stand-alone. This would allow:

% mkdir /tmp/mmh
% cd /tmp/mmh
% mmh download-sources
% for d in */; do (cd "$d" && mmh); done

…to build everything that can be build stand-alone.
** DONE Allow for --single-instance with module builds as well
This should be pretty straight forward, and useful.

Update: Instead, module builds have the focus subcommand, that achieves a
similar feature-set.
** CANCELED Load module snippets via cmdline arg
eg: zephyr-3.0.yaml etc. Maybe even via global repository.

Not sure if this is all that useful, if we can do:

  mmh --revision "zephyr-kernel=v3.0.0"

…plus inheriting zephyr-module revisions from the kernel's west.yaml file.

And with config-extensions this could become:

  mmh --config zephyr-3.0

…so, this is probably not worth it.

Update: Yes, not worth it.

** DONE Zsh completion would be nice
** DONE Forget "tools" — check all dependencies into "deps"
** DONE Allow printing build stages with --log-to-file
This is useful for progress in CI.
** DONE Error out when checkout of dependency revision fails
** DONE Make non-existant zephyr modules an error?
